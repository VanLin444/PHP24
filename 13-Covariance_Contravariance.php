<!DOCTYPE html>
<html lang = "ru">
<head>
    <title>Ковариантность и контравариантность</title>
</head>
<body>

<?php
// Ковариантность означает, что тип данных в подклассе может быть более конкретным, чем в родительском классе.
// Позволяет дочернему методу возвращать указанный или более конкретный тип, чем тип определенный в родительском методе.
// Для чего это нужно?
// Хорошо типизированная программа делает код более надежным и предотвращая ошибки связанные с неверными типами данных.
class Animal {
    // В родительском классе функция может возвращать типы int|float|string
    public function makeSound() : int|float|string {
        return "Some sound <br>";
    }
}

class Dog extends Animal {
    // В дочернем классе функция возвращает только СТРОКОВЫЙ ТИП ДАННЫХ
    public function makeSound() : string{
        return "Gav Gav <br>";
    }
}

$dog = new Dog();
echo $dog -> makeSound();

// Контравариантность
// Снижает требования для входных данных, позволяя расширять тип параметров метода.
// Контравариантность разрешает параметру метода быть более общим чем указано в родительском классе.
// Дочерний метод должен принимать все те типы с которыми умеет работать родительский метод, а также может работать с дополнительными типами, если ему это необходимо.
// Таким образом, дочерний метод может работать с тем, с чем не умеет работать родительский метод (контравариантность), но при этом возвращать он должен, 
// обязательно то, что ожидается от родительского метода (ковариантность). Т.е. "наружу" метод ограничен родительским типом, а "внутрь" неограничен (расширяем).
class Planet {
    public function getPlanet(int $number) {
        return $number;
    }
}

class Alien extends Planet {
    public function getPlanet(int|string $number){
        return "LV-" . $number;
    }
}

$plnt = new Alien;
echo $plnt -> getPlanet("426");
?>

</body>
</html>