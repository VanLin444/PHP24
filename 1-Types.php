<?php
# FABIS RONIC
// По умолчанию PHP — язык с динамической типизацией. 
// Это значит, что тип переменной определяется в момент присваивания значения.
$int = 4; // Целочисленный тип данных - десятичное число от -2,147,483,648 и 2,147,483,647
$float = 3.14; // Число с плавающей точкой
$bool = true; // Логический тип данных отражает два возможных состояния: true или false.
$string = "Гарри Поттер"; // Строка - последовательность символов. Строкой может быть любой текст внутри кавычек.
$arr = array("Какаши","Наруто","Саске","Сакура"); // Массив хранит несколько значений в одной переменной.
$null = null; // Нал - специальный тип данных,который указывает на отсутствие значения, а так же который может иметь только одно значение: null.

/*
Тип данных объект, хранит данные и информацию о том, как обрабатывать эти данные.
В PHP, объект должен быть объявлен точно.
Сначала мы должны объявить класс объекта. Для этого используем ключевое слово class.
Класс - это структура, которая может содержать свойства и методы:
*/
class Hokage
{
    function hokageName($name) {
        print_r($name);
    }
}

// Объект - это экземпляр класса
// Создаём объект
$hokname = new Hokage();
$hokname->hokageName("Наруто Узумаки <br>");


//Resource - это специальная переменная, содержащая ссылку на внешний ресурс.
//Ресурсы создаются и используются специальными функциями.

//Так же есть типы:

//callable - используется для передачи функций в качестве аргументов или возврата их из других функций.
// Имена функций и методов передаются как строки или массивы.
// Анонимные функции (замыкания) могут захватывать переменные из окружающего контекста с помощью ключевого слова use. 
// Объекты с методом __invoke автоматически считаются callable.

function square($n) {
    return $n * $n;
}

$numbers = [1, 2, 3, 4];
// В данном случае мы применяем функцию "square" к каждому  элементу массива $numbers 
// и с помощью функции array_map() возвращаем новый массив с преобразованными значениями.
$squared = array_map('square', $numbers);
print_r($squared);

// Проверка переменной на то, что переменная callable
$callable = 'square';
var_dump(is_callable($callable));

echo '<br>';

// Тут мы обращаемся к переменной $callable как к функции передавая ей аргумент
function greet($name) {
    return "Hello, $name!";
}

$callable = 'greet';
echo $callable('Ivan');

echo '<br>';

//iterable - используется для указания, что переменная может быть итерируемой, то есть её можно перебрать с помощью цикла foreach.
// Iterable может быть :
//  Массивом (тип array).
//  Объектом, реализующим интерфейс Traversable

// Вызов функции используя её имя
function curren_Hokage(){
    echo "Tsunade Senju <br>";
}
call_user_func("curren_Hokage");

// Вызов метода класса. Первым передаётся массив с объектом класса и если у метода есть аргументы, то после передаются и они
call_user_func(array($hokname,"hokageName"), "Minato Namikaze");
echo '<br>';

/* Функции вывода данных
    - echo
    - print
    - print_r
    - var_dump
*/
// echo - языковая конструкция, которая :
// - Может принимать несколько аргументов
// - Поддерживает вывод HTML
echo $string . $int . '<br>';

// print - Конструкция языка, а не функция
// - Принимает только один аргумент
// - Всегда возвращает 1
print 880005553535;
echo '<br>';

// print_r - функция , предназначена для вывода структур данных (массивов, объектов)
// - Возвращает строку, если используется return
// - По умолчанию не показывает типы данных
// - Имеет второй параметр (return), который заставляет функцию вернуть строку вместо вывода - print_r($value, $return = true)
print_r($arr);
echo '<br>';

/* var_dump - функция 
- Предназначена для отладки
- Показывает типы данных и значения
- Показывает длину строк и размер массивов
- Не имеет параметра return (всегда выводит напрямую)
- Может принимать несколько аргументов
*/
var_dump($arr, $hokname);
?>