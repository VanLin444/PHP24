<!DOCTYPE html>
<html lang = "ru">
<head>
    <title>Arrays</title>
</head>
<body>

<?php
// Массивы в PHP - это структура данных, которая позволяет хранить множество значений в одной переменной. 
// Каждое значение в массиве имеет свой уникальный индекс, по которому можно обращаться к нему.
/*  Особенности массивов в PHP :
    - Динамический размер: массивы автоматически расширяются при добавлении элементов
    - Гетерогенные данные: могут содержать значения разных типов
    - Гибкие ключи: могут быть как целыми числами, так и строками
    - Функциональные возможности: множество встроенных функций для работы с массивами
*/
/* Массивы бывают : 
 - Индексированными (Числовые ключи, начинающиеся с 0);
 - Ассоциативными (Строковые ключи);
 - Многомерные (Массивы, содержащие другие массивы);
*/

// Индексированные массивы
$team7 = ["Kakashi", "Naruto", "Sasuke", "Sakura"];
echo $team7[0] . '<br>';

// Ассоциативные массивы
$summon = ["Tsunade" => "Slime", "Orochimaru" => "Snake", "Djiraya" => "Toad"];
echo "Orochimaru summon - ". $summon['Orochimaru'] . '<br>';

// Многомерные масивы
$teams = [
    "five" => ["Guy", "Li", "Nedji", "Ten-Ten"],
    "seven" => [ "Kakshi", "Naruto", "Sasuke", "Sakura"],
    "eight" => [ "Kurenai", "Hinata", "Shino", "Kiba"],
    "ten" => ["Asuma", "Shikomaru", "Ino", "Jodji"]
];
print_r($teams['eight']);

echo '<br>';

// Основные операции с массивами :
// Добавление одного элемента (в конец массива)
$team7[] = "Sai";
print_r($team7);

echo '<br>';

// Добавление нескольких элементов
$uzumaki = ["Naruto", "Kushina"];
array_push($uzumaki, "Karin", "Mito", "Nagato");
print_r($uzumaki);

echo '<br>';

// Удаление элемента
unset($team7[2]); // Удаляется в том числе и индекс. Как видно 2 индекс с его элементом удалены - Array ( [0] => Kakashi [1] => Naruto [3] => Sakura [4] => Sai ) , у остальных всё остаётся также.
print_r($team7);
echo '<br>';

// Удаление первого элемента массива
array_shift($team7); // Как видно индексы обновляются Array ( [0] => Naruto [1] => Sakura [2] => Sai )
print_r($team7);
echo '<br>';

// Удаление последнего элемента массива
array_pop($team7); // Array ( [0] => Naruto [1] => Sakura )
print_r($team7);
echo '<br>';

// Объединение массивов
$ino = ['Перенос сознания'];
$shika = ['Теневые путы'];
$cho = ['Частичная трансформация тела'];
$combo = array_merge($ino, $shika, $cho);
print_r($combo);

echo '<br>';

// Количество элементов в массиве
echo "В массиве - " . count($uzumaki) . ' элементов!<br>';

// Есть ли в массиве указанный элемент
echo in_array('Karin', $uzumaki) . '<br>';

// Ищет значение в массиве, и если находит, возвращает ключ первого найденного элемента
echo array_search('Toad', $summon) . '<br>';

// Сортировка массивов
$order = [111, 47, 8, 19, 441, 1007, 2];
// По возрастанию - sort()
sort($order);
print_r($order);
echo '<br>';
// Если это ассоциативный массив, то берутся значения и выстраиваются по алфавиту Array ( [0] => Slime [1] => Snake [2] => Toad )
// Как видно он не сохраняет ключи в отличии asort(), который сохраняет
sort($summon);
print_r($summon);
echo '<br>';
// По убыванию rsort()
rsort($order);
print_r($order);
echo '<br>';
// Сортировка ассоциативного массива по значениям с сохранением связи между ключом и значением
$summon = ["Tsunade" => "Slime", "Orochimaru" => "Snake", "Djiraya" => "Toad"];
asort($summon);
print_r($summon);
echo '<br>';
// Сортировка ассоциативного массива по ключам
$summon = ["Tsunade" => "Slime", "Orochimaru" => "Snake", "Djiraya" => "Toad"];
ksort($summon);
print_r($summon);
echo '<br>';

// Фильтрация массива
// array_filter — Фильтрует элементы массива через callback-функцию. Если callback-функция возвращает TRUE, то текущее значение массива копируется в результирующий - $even
// Функция сохраняет ключи входного индексного массива array, поэтому после фильтрации иногда появляются пропуски. Array ( [1] => 2 [3] => 4 [5] => 6 [7] => 8 )
$numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];
$even = array_filter($numbers, function($n) {
    return $n % 2 === 0;
});
print_r($even);
echo '<br>';

// Преобразование массива
// array_map — Применяет callback-функцию к элементам массивов. И возвращает массив из результатов применения callback-функции к каждому элементу.
// В данном случае мы возводим каждый элемент в квадрат - Array ( [0] => 1 [1] => 4 [2] => 9 [3] => 16 [4] => 25 [5] => 36 [6] => 49 [7] => 64 [8] => 81 )
$squares = array_map(function($n) {
    return $n * $n;
}, $numbers);
print_r($squares);
echo '<br>';

// Редукция массива
// array_reduce — Итеративно уменьшает массив к единственному значению через callback-функцию
// задается начальное значение 0 после каждый элемент прибавляется к результату прошлого сложения $sum = 45
$sum = array_reduce($numbers, function($carry, $item) {
    return $carry + $item;
}, 0);
echo $sum . '<br>';

// Удаления пробелов с начала и с конца строки
echo trim("   aas dsad  ");


?>

</body>
</html>